#lang racket
(require racket/trace)
;;Uppg. 1 
#|Skillnaden mellan att skriva ut ett värde och att returnera ett värde är att det senare är en "biprodukt" egenskap hos scheme , som sker automatiskt när kod returnerar ett värde.  
När ett värde skrivs ut som exempelvis display-proceduren ser till sker skrivs ett värde ut till skärmen för att anvädaren ska se. |#

  
;;Uppg. 2 

(define (for-each-element proc list)
  (unless (null? list) 
       (begin (proc (car list)) (for-each-element proc (cdr list)))))


;;Uppg. 5
(define count-calls
  (let ([count 0])
    (lambda n
      (cond ([null? n] (set! count (+ count 1)))
            ([eq? (car n) 'reset] (set! count 0))
            ([eq? (car n) 'how-many-calls] count)))))
(count-calls)
(count-calls 'how-many-calls)
(count-calls 'reset)

;;Uppg. 7
(define (make-monitored proc)
  (let ([count 0])
    (lambda n
      (cond ([eq? (car n) 'reset] (set! count 0))
            ([eq? (car n) 'how-many-calls] count)
            (else (set! count (+ count 1))
(apply proc n))))))

;;Uppg. 9

(define (rev lst)
  (let 
      ([res '()]) ;local variable for the result 
    (define (loop)
      (cond 
        [(null? lst) res]
        [else (set! res (cons (car lst) res))
              (set! lst (cdr lst))
              (loop)]))
    (loop)))

(rev '(1 2 3 4))




;; Uppg. 10 
(define writer
  (lambda (text filename . arg)
    (cond  [(null? arg) (begin (define name (open-output-file filename #:exists 'replace)) 
                               (write text name)
                               (close-output-port name))]
           [(eq? (car arg) +) (begin (define name (open-output-file filename #:exists 'append))
                                    (newline name)
                                    (write text name)
                                    (close-output-port name))])))


;; Uppg. 11 

(define reader 
  (lambda (filename func)
    (define name (open-input-file filename))
    (define (loop)
      (let ((var (read-line name)))
        (if (eof-object? var)
            (close-input-port name)
            (begin (func var) (loop)))))
    (loop)))







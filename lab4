#lang racket
(require racket/trace)
;;UPPGIFT 1 
;;När den skriver ut ett värde så binds en variabeln till
;; värdet, värdet skrivs ut. Returneringen av ett värde sker på det sättet 
;;att procedurer kan returneras och binds inte till ett värde. 

  
;;UPPGIFT  2 

(define (for-each-element proc list)
  (unless (null? list) 
       (begin (proc (car list)) (for-each-element proc (cdr list)))))

;;Uppg 5
(define count-calls
  (let ([count 0])
    (lambda n
      (cond ([null? n] (set! count (+ count 1)))
            ([eq? (car n) 'reset] (set! count 0))
            ([eq? (car n) 'how-many-calls] count)))))

;;Uppg 7
(define (make-monitored proc)
  (let ([count 0])
    (lambda n
      (cond ([eq? (car n) 'reset] (set! count 0))
            ([eq? (car n) 'how-many-calls] count)
            (else (set! count (+ count 1))
                  (apply proc n))))))
                  
;;Uppg 10
(define writer
  (lambda (text file . arg)
    (cond ([null? arg] (begin (define name (open-output-file file #:exists 'replace))
                              (write text name)
                              (close-output-port name)))
          ([eq? (car arg) +] (begin (define name (open-output-file file #:exists 'append))
                                    (newline name)
                                    (write text name)
                                    (close-output-port name))))))
